
1. 眼动仪程序安装环境(Software & Hardware)
1.1 软件版本，ubuntu19.10；Qt Creator 4.11.1(Based on Qt5.14.1);
      I think oter version of software is ok too.
1.1.1安装Tobii Pro Eye Tracker Manager
this web "https://www.tobiipro.com/zh/learn-and-support/downloads-pro/";
you can search "Tobii Pro Eye Tracker Manager";
then download "Tobii Pro Eye Tracker Manager for Linux 2.1.2";
you can use "dpkg -i TobiiProEyeTrackerManager-2.1.0.deb" to install;

1.2 EyeTracker Tobii 4C;
1.3 Download the file: tobii.h, tobii_advanced.h, tobii_config.h, tobii_licensing.h,
      tobii_streams.h, tobii_wearable.h, and libtobii_stream_engine.so.
      you can download from here: https://github.com/intfreedom/Tobii-Eye-Tracker-Tobii-4C/tree/master/GUI/Demo/tobii,
      https://github.com/intfreedom/Tobii-Eye-Tracker-Tobii-4C/tree/master/tobii_eye_tracker_linux_installer-master/lib/lib/x64

2. 使用Qt新建一个工程，把tobii的头文件，动态链接库添加至工程；
    File->New File or Project...(Default Settings only)
2.1 添加头文件
      Right-click the project name->Add  Existing Directory..., you must add all the "head file";
      For example: "tobii.h, tobii_advanced.h, tobii_config.h, tobii_licensing.h,
      tobii_streams.h, tobii_wearable.h";
2.2 添加动态链接库
      Right-click the project name->Add  Library...->Internal library;
      then, select the file: "libtobii_stream_engine.so"

3. 学习如何使用Qt编程，读取头文件中的函数；
Learn how to program using Qt, using functions in the tobii head files;
3.1 for this project, you must use tobii4C;
for example, you can use this function to get the coordinates of the eyes.
void gaze_point_callback(tobii_gaze_point_t const *gaze_point, void *user_data) 

for now, I try use "pipe" to connect matalab an QT;

在头文件处添加这些，尝试"pipe";
//add for pipe, start;
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
//add for pipe, end;
把以下文件，
    //add for pipe, start;
//    const char *fifo_name = "/tmp/my_fifo";
//    int pipe_fd = -1;
//    int data_fd = -1;
//    int res = 0;
//    const int open_mode = O_WRONLY;
//    int bytes_sent = 0;
//    char buffer[PIPE_BUF + 1];

//    if(access(fifo_name, F_OK) == -1)
//    {
//        //管道文件不存在
//        //创建命名管道
//        res = mkfifo(fifo_name, 0777);
//        if(res != 0)
//        {
//            fprintf(stderr, "Could not create fifo %s\n", fifo_name);
//            exit(EXIT_FAILURE);
//        }
//    }

//    printf("Process %d opening FIFO O_WRONLY\n", getpid());
//    //以只写阻塞方式打开FIFO文件，以只读方式打开数据文件
//    pipe_fd = open(fifo_name, open_mode);
//    data_fd = open("Data.txt", O_RDONLY);
//    printf("Process %d result %d\n", getpid(), pipe_fd);

//    if(pipe_fd != -1)
//    {
//        int bytes_read = 0;
//        //向数据文件读取数据
//        bytes_read = read(data_fd, buffer, PIPE_BUF);
//        buffer[bytes_read] = '\0';
//        while(bytes_read > 0)
//        {
//            //向FIFO文件写数据
//            res = write(pipe_fd, buffer, bytes_read);
//            if(res == -1)
//            {
//                fprintf(stderr, "Write error on pipe\n");
//                exit(EXIT_FAILURE);
//            }
//            //累加写的字节数，并继续读取数据
//            bytes_sent += res;
//            bytes_read = read(data_fd, buffer, PIPE_BUF);
//            buffer[bytes_read] = '\0';
//        }
//        ::close(pipe_fd);
//        ::close(data_fd);
//    }
//    else
//        exit(EXIT_FAILURE);

//    printf("Process %d finished\n", getpid());
//    exit(EXIT_SUCCESS);
    //add for pipe, end;




1.命名管道是由mkfifo函数创建 的 ，打开用open
命名管道和匿名管道唯一的区别就是在创建的打开，一旦这些工作完成后，它们有相同的意义。
#include <sys/types.h>
#include <sys/stat.h>
int mkfifo(const char *filename, mode_t mode);
1.1如何使用命名管道
https://blog.csdn.net/ffsiwei/article/details/81031808
1.1.1
管道文件的创建，终端：mkfifo my.p，管道文件大小为0，没有关系的进程也能通过管道名
来取到该管道中的缓存；
1.1.2
创建管道文件，int mkfifo(const char* name, mode_t mode)
打开管道文件，int fd=open(name, O_RDONLY);//读
	        int fd=open(name, O_WRONLY);//写
1.1.2.1 将文件写入命名管道中
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>

int main(char argc,char *argv[])
{
        mkfifo("tp",0644);//创建一个命名管道
        int infd=open("abc",O_RDONLY);//表示要复制的文件
        if(infd<0)
                perror("open"),exit(1);
        int outfd=open("tp",O_WRONLY);//写入到管道文件中
        if(outfd<0)
                perror("open"),exit(1);
        char buf[100];
        int n=0;
        while((n=read(infd,buf,100))>0){
                write(outfd,buf,n);//往outfd中写入数据
        }
        close(infd);
        close(outfd);
        return 0;
}
1.1.2.2 将管道中的数据导入到拷贝文件中
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>

int main(int argc,char *argv[])
{
        int outfd=open("abc_bk",O_RDONLY|O_WRONLY|O_CREAT|O_TRUNC,0644);//需要拷贝的文件
        if(outfd<0)
                perror("open"),exit(1);
        int infd=open("tp",O_RDONLY);//打开管道，将管道中的数据读走
        if(infd<0)
                perror("open"),exit(1);
        char buf[100];
        int n;
        while((n=read(infd,buf,100))>0){
                write(outfd,buf,n);
        }
        close(infd);
        close(outfd);
        unlink("tp");//删除指定名字的文件
        return 0;
}

1.2使用新的方式建立命名管道；

2.通过MATLAB将C/C++函数编译成MEX函数，在MATLAB中就可以调用了。
https://blog.csdn.net/wislon/article/details/78777298


1.3qt使用https://mobile.51cto.com/symbian-270726.htm与外部通讯；